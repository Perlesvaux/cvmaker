#!/usr/bin/env python3

"""
Turn a JSON file into a cv! 
Initialize a JSON representation of your cv.
Customize it as you see fit.
Lastly, feed that JSON to this script like this:

    cvmaker CV.json 

Open the resulting HTML file. Now do CTRL+P to generate a PDF out of it (i.e.: Destination -> Save to PDF)! 
Use these settings for the best results:
    Orientation -> Portrait
    Margins -> None
    Scale -> Default (or 'Fit to page width')
    
... Enjoy! =D

"""


seed = {
  "name": "Your_full_name_goes_here",
  "residence": "City, country",
  "phone": "+000 0000000",
  "email": "example@mail.com",
  "github": "Link_to_your_github_goes_here",
  "linkedin": "Link_to_your_linkedin_goes_here",
  "profile": "59-word description of who you are. i.e.: Front-End Developer. I specialize in React.js and love to fine-tune my own CSS whenever possible. UX before looks. I carefully study the documentation before starting to code. Effective communication is the way to get things done; clear code is the map, concise comments the compass",
  "experience": [
    {"when":"Dec 2011 - Jan 2012",
     "where": "Place",
     "what":"Role",
     "description":"Role_description_goes_here"},

    {"when":"Apr 2016 - Apr 2019",
     "where": "Place",
     "what":"Role",
     "description":"Role_description_goes_here"}

  ],
  "certifications":[
    {"description":"Briefly_describe_what_cert_is_about", "image":"./path/to/image.png", "link":"https://www.freecodecamp.org/certification/..."},
    {"description":"Briefly_describe_what_cert_is_about", "image":"./path/to/image.png", "link": "https://drive.google.com/..."}
  ],
  "skills":[
      {"skill":"<i class='bi bi-translate pe-2'></i>English_proficiency_and_any_other_language_you_speak_goes_here"},
      {"skill":"<i class='bi bi-code-slash pe-2'></i>You_can_add_bootstrap_icons_and_add_some_padding_with_class_pe-2"},
      {"skill":"https://icons.getbootstrap.com/"},
      {"skill":"Customize_skill_set_as_you_see_fit"},
      {"skill":"Add_soft_skills_if_you_want_as_well"},
      {"skill":"Be_prudent_as_too_many_rows_can_make_the_final_document_somewhat_ugly"}
  ]
}







body = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Bootstrap 5.3.2 -->
    <!-- script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script> -->
    <!-- link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" integrity="sha384-4LISF5TTJX/fLmGSxO53rV4miRxdg84mZsxmO8Rx5jGtp/LbrixFETvWa5a6sESd" crossorigin="anonymous"> -->

    <link rel="stylesheet" href="{icons}">

    <style>

    

    {pagebreak}

    {style}

    </style>

    <title>cvmaker</title>
</head>
<body>


<div class="card border-light mb-3">
  <!-- <div class="card-header text-dark text-center">Name Goes Here</div> -->
      <div class="card-header text-dark text-center h1"><i class="bi bi-person-fill"></i> <span class="px-2">{name}</span></div>

  <div class="card-body">
    <ul class="list-group mb-3">
      <li class="list-group-item list-group-item-info d-flex">
                <i class="bi bi-geo-alt-fill"></i> <span class="px-2">{residence}</span>
      </li>
      <li class="list-group-item list-group-item-info d-flex">
                <i class="bi bi-telephone-fill"></i> <span class="px-2">{phone}</span>
      </li>
      <li class="list-group-item list-group-item-info d-flex">
                <i class="bi bi-envelope-fill"></i> <span class="px-2">{email}</span>
      </li>
    </ul>   
   <div class="row">
            <div class="col-6">
    <a href="{github}" class="btn btn-dark btn-lg p-2  col-12 "><i class="bi bi-github h1"></i></a> 
  </div>

            <div class="col-6">
    <a href="{linkedin}" class="btn btn-info btn-lg p-2  col-12"><i class="bi bi-linkedin h1"></i></a> 
  </div>
  </div>

  </div>
</div>


<div class="card border-light mb-3">
    <div class="card-header text-center h2 text-dark">Skills</div>
     <div class="card-body">
    <ul class="list-group">
      {skills}
    </ul>   
      </div>
</div>


<div class="card border-light mb-3">
    <div class="card-header text-center h2 text-dark">Profile</div>
     <div class="card-body">
        <div class="alert alert-dismissible alert-info">
            {profile}
        </div>
      </div>
</div>

<div class="break"></div>

<div class="card border-light mb-3">
    <div class="card-header text-center h2 text-dark">Licenses & certifications</div>
     <div class="card-body">
        <div class="container d-flex flex-wrap">
          {certifications}
          
        </div>
      </div>
</div>

<div class="break"></div>


<div class="card border-light mb-3">
    <div class="card-header text-center h2 text-dark">Experience</div>
     <div class="card-body">

    <ul class="list-group">
      {experience}
          </ul>

      </div>
</div>





</body>
</html>

"""


skills_template = """<li class='list-group-item list-group-item-success d-flex'>{skill}</li>"""
certs_template = """

          <div class='card border-light' style='height:{img_size}%;width:{img_size}%;'>
            <div class="card-body" >
              <div><a href='{link}'><img style="height:100%;width:100%; class="border border-dark" src='{image}' alt="{description}"></a></div>
            </div>
            <div class="card-footer  h6">
               {description}
            </div>
          </div>
"""
experience_template = """
<li class='list-group-item list-group-item-primary d-flex'>
 <div class='container'>
  <div class='row'>
   <div class='col-4'><strong>{when}</strong></div>
   <div class='col-4'><strong>{where}</strong></div>
   <div class='col-4'><i><strong>{what}</strong></i></div></div>
   <div>{description}</div></div>
</li>
   """



import os
import json

import argparse


# root = os.path.dirname(os.path.abspath(__file__))
# root = os.path.dirname(os.getcwd())
root = os.path.dirname(os.path.realpath(__file__))


actions={
        'skill': lambda: addition('skills', {"skill":"Enter your new skill!\n>"} ),
        'experience': lambda: addition('experience', {"when":"When? i.e.: Jun 1996 - Dec 1999\n>", "where":"Where? i.e.: Microsoft\n>", "what":"what? i.e.: Front End Developer\n>"}),
        'cert': lambda: addition('certifications', {"description": "Describe what the certification is about\n> ", "image": "Add path to image. Paste with CTRL+Shift+V\n> ", "link": "Add link to certification. Paste with CTRL+Shift+V\n> "})
        }


    

def addition(field, keys_and_prompts):
        with open(os.path.join(root, os.getcwd(), 'your_cv.json'), 'r') as _in: 
            cv = json.load(_in)
            cv[field].append({key:input(prompt) for key,prompt in keys_and_prompts.items()})

        with open(os.path.join(root, os.getcwd(), 'your_cv.json'), 'w') as _out:
            _out.write(json.dumps(cv, indent=2))



def main():
    parser = argparse.ArgumentParser(description='Turn a JSON file into a cv! (1) Pipe the output to an HTML file. (2) Open it and do CTRL+P to generate a PDF out of it! ')

    # Positional argument for the file name
    parser.add_argument('json', nargs='?', help='Feed this script a JSON representing your cv. If you don\'t have one yet, use "cvmaker -n" to create one')

    # Optional argument to specify image size
    parser.add_argument('-i', '--image-size', type=int, help='Image size', choices=[0,1,2])

    # Optional argument to specify flavor
    parser.add_argument('-f','--flavor', help='Flavor of the script', choices=[
"zephyr","yeti","vapor","united","superhero","spacelab","solar","slate","sketchy","simplex","sandstone","quartz","pulse",
"morph","minty","materia","lux","lumen","litera","journal","flatly","darkly","cyborg","cerulean","cosmo"])

    # Argument to create a JSON
    parser.add_argument('-n', '--new', action='store_true', help="Resulting json is your cv. Customise it as you see fit.")

    # Argument to add features to JSON
    parser.add_argument('-a', '--add', choices=['skill', 'experience', 'cert'], nargs="?", help="Add new skills, experience interactively.")





    # Action starts HERE!
    args = parser.parse_args()


    # Initialize a cv.json. 
    if args.new:
        print(f"new flag activated here: {os.path.join(root, os.getcwd())}!")

        with open(os.path.join(root, os.getcwd(), 'your_cv.json'), 'x') as your_cv:

            # Getting user input...
            print("Skip field leaving blank & pressing ENTER.")
            name = input("Enter your full name\n> ")
            country = input("Residence - Enter the country you currently are on\n> ")
            city = input("Residence - Enter the city you currently live at\n> ")
            ext = input("Phone - Enter your area/country code (i.e.: 001 = USA, 503 = ESA)\n> ")
            phone = input("Phone - Enter your phone number\n> ")
            email = input("Email - Enter your e-mail address\n> ")
            profile = input("Profile - 59-word description of yourself. Strengths only!\n> ")

            seed['name']      = seed['name'] if name=="" else name    
            seed['residence'] = f"{'City' if city=='' else city}, {'Country' if country=='' else country}" 
            seed['phone']     = f"{'+000' if ext=='' else f'+{ext}'} {'0000000' if phone=='' else phone}"     
            seed['email']     = seed['email']   if email=="" else email   
            seed['profile']   = seed['profile']   if profile=="" else profile   

            your_cv.write(json.dumps(seed, indent=2))
            print("your_cv.json successfully created! (now do:\ncvmaker your_cv.json).")



    
    if args.add:
        actions.get(args.add)()


    sizes = ['33', '50', '100']

    img_size = sizes[args.image_size] if args.image_size else '33'

    flavor = os.path.join(root, 'styles', f"{args.flavor}.css") if args.flavor else os.path.join(root, 'styles', 'spacelab.css')

    icons = os.path.join(root, 'font', 'bootstrap-icons.css')

    if args.json:

        with open(args.json, 'r') as file, open(flavor) as css:
            cv = json.load(file)
            result = body.format(
                icons=icons,   
                style=css.read(),    
                pagebreak="@media print {.break {page-break-after: always;}}",
                name=cv["name"],
                residence=cv["residence"],
                phone=cv["phone"],
                email=cv["email"],
                github=cv["github"],
                linkedin=cv["linkedin"],
                profile=cv["profile"],
                skills = " ".join ([skills_template.format(skill=ability['skill']) for ability in cv["skills"]]),
                certifications = " ".join([certs_template.format(link=cert['link'], image=cert['image'], description=cert['description'], img_size=img_size) for cert in cv["certifications"]]),
                experience = " ".join([experience_template.format(when=exp['when'], where=exp['where'], what=exp['what'], description=exp['description']) for exp in cv['experience']])

                )
            print(result)



if __name__ == "__main__":
    main()

#TODO add json-feature interactive adder -a -add [certification, skill, etc.]
#TODO add flag to specify card theme [primary info warning dark, etc...] text-color and header-color
#TODO: Make a control panel (dict) to handle -a flag
